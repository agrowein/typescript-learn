Типы определенные в TS

enum — ограниченный набор значений
any — указывает на то, что переменная/параметр могут быть чем угодно, что, по сути, нивелирует типизацию
unknown — типобезопасная альтернатива any
void — указывает на то, что функция ничего не возвращает
never — указывает на то, что функция выбрасывает исключение или на то, что ее выполнение никогда не заканчивается

Множества

Карты (maps)
    // Создаем ассоциативный тип
    type User = {
     id: number
     username: string
     name: string
    }

    // Создаем объект `user`, соответствующий ассоциативному типу
    const user: User = {
     id: 1,
     username: 'Superman',
     name: 'Clark Kent',
    }

Векторы (vectors)
    // Создаем ассоциативный тип
    type User = {
     id: number
     username: string
     name: string
    }

    // Создаем несколько объектов `user`, соответствующих ассоциативному типу
    const user1: User = {
     id: 1,
     username: 'Superman',
     name: 'Clark Kent',
    }

    const user2: User = {
     id: 2,
     username: 'WonderWoman',
     name: 'Diana Prince',
    }

    const user3: User = {
     id: 3,
     username: 'Spiderman',
     name: 'Peter Parker',
    }

    // Создаем вектор пользователей
    const userVector: User[] = [user1, user2, user3]

Кортежи (tuples)
    // Создаем ассоциативный тип
    type User = {
     id: number
     username: string
     name: string
    }

    // Создаем объект `user`, соответствующий ассоциативному типу
    const user1: User = {
     id: 1,
     username: 'Superman',
     name: 'Clark Kent',
    }

    // Создаем кортеж
    const userTuple: [User, number] = [user1, 10]

